package com.zxgs.test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class wkttoesrijson {
	// 程序的入口
	public static void main(String args[]) {
		// 向控制台输出信息
	
		System.out.println("欢迎java01班的同学");
		
		// ok
//		String pointzm = "POINT ZM ( 127.51388100 46.88220700 0.00000000 nan)";
//		System.out.println(pointwkttoJson(pointzm));
//		
//		// ok
//		String LineStringZM = "LINESTRING ZM ( 120.05256700 30.30386900 0.00000000 nan, 120.05262500 30.30410800 0.00000000 nan, 120.05276200 30.30498800 0.00000000 nan, 120.05276200 30.30502400 0.00000000 nan, 120.05278500 30.30527000 0.00000000 nan, 120.05278500 30.30535400 0.00000000 nan, 120.05277300 30.30593400 0.00000000 nan, 120.05275400 30.30662600 0.00000000 nan, 120.05270900 30.30700200 0.00000000 nan, 120.05267000 30.30723600 0.00000000 nan, 120.05266300 30.30727900 0.00000000 nan, 120.05263200 30.30742400 0.00000000 nan, 120.05252900 30.30788700 0.00000000 nan, 120.05209800 30.30950200 0.00000000 nan, 120.05166000 30.31118100 0.00000000 nan, 120.05117500 30.31291200 0.00000000 nan, 120.05070200 30.31460600 0.00000000 nan, 120.05020600 30.31634500 0.00000000 nan, 120.04974800 30.31807200 0.00000000 nan, 120.04927900 30.31978900 0.00000000 nan, 120.04884800 30.32151400 0.00000000 nan, 120.04864600 30.32253900 0.00000000 nan, 120.04854300 30.32323600 0.00000000 nan, 120.04847800 30.32380800 0.00000000 nan, 120.04844700 30.32421200 0.00000000 nan, 120.04842800 30.32450700 0.00000000 nan, 120.04841300 30.32497000 0.00000000 nan, 120.04839000 30.32575600 0.00000000 nan, 120.04845500 30.32678800 0.00000000 nan, 120.04850400 30.32762000 0.00000000 nan, 120.04856200 30.32805000 0.00000000 nan, 120.04873700 30.32907800 0.00000000 nan, 120.04885200 30.32968800 0.00000000 nan, 120.04919100 30.33096000 0.00000000 nan, 120.04922900 30.33108700 0.00000000 nan, 120.04931300 30.33135100 0.00000000 nan, 120.04939300 30.33160000 0.00000000 nan, 120.04973300 30.33255200 0.00000000 nan, 120.05005300 30.33334500 0.00000000 nan, 120.05039600 30.33406200 0.00000000 nan, 120.05092300 30.33507100 0.00000000 nan, 120.05125900 30.33565600 0.00000000 nan)";
//		System.out.println(polylinewkttoJson(LineStringZM));
	
		// ok
		String polygonzm = "POLYGON ZM (( 120.47075000 30.75219900 0.00000000 nan, 120.47060900 30.75251000 0.00000000 nan, 120.46930000 30.75561400 0.00000000 nan, 120.46921200 30.75583300 0.00000000 nan, 120.46682400 30.76011900 0.00000000 nan, 120.46410800 30.76469600 0.00000000 nan, 120.46340600 30.76689800 0.00000000 nan, 120.46362300 30.76745800 0.00000000 nan, 120.46429800 30.76824400 0.00000000 nan, 120.46530200 30.76881600 0.00000000 nan, 120.46709100 30.76912400 0.00000000 nan, 120.46881500 30.76933200 0.00000000 nan, 120.47109700 30.76881200 0.00000000 nan, 120.47253500 30.76794300 0.00000000 nan, 120.47571300 30.76753600 0.00000000 nan, 120.47774200 30.76658700 0.00000000 nan, 120.47863100 30.76445900 0.00000000 nan, 120.47928300 30.76387700 0.00000000 nan, 120.48027900 30.76403700 0.00000000 nan, 120.48603500 30.76534500 0.00000000 nan, 120.48213600 30.77210200 0.00000000 nan, 120.47982400 30.77512100 0.00000000 nan, 120.47767400 30.77828800 0.00000000 nan, 120.47405700 30.78488900 0.00000000 nan, 120.47168400 30.79087000 0.00000000 nan, 120.47129900 30.79427000 0.00000000 nan, 120.47092900 30.79938700 0.00000000 nan, 120.47100200 30.80072700 0.00000000 nan, 120.47126100 30.80375500 0.00000000 nan, 120.47102500 30.80605100 0.00000000 nan, 120.46917800 30.80811900 0.00000000 nan, 120.46893700 30.80817000 0.00000000 nan, 120.46795300 30.80838600 0.00000000 nan, 120.46701900 30.80838900 0.00000000 nan, 120.46478700 30.80843300 0.00000000 nan, 120.46209700 30.80934100 0.00000000 nan, 120.43655100 30.69970500 0.00000000 nan, 120.43723400 30.70136600 0.00000000 nan, 120.43860600 30.70311800 0.00000000 nan, 120.43980400 30.70383000 0.00000000 nan, 120.44100200 30.70402400 0.00000000 nan, 120.44279100 30.70376900 0.00000000 nan, 120.44822300 30.70295800 0.00000000 nan, 120.44942100 30.70286400 0.00000000 nan, 120.44966900 30.70284300 0.00000000 nan, 120.45080200 30.70275400 0.00000000 nan, 120.45272500 30.70330100 0.00000000 nan, 120.45565400 30.70434600 0.00000000 nan, 120.45784400 30.70500500 0.00000000 nan, 120.46008000 30.70528200 0.00000000 nan, 120.46114100 30.70503800 0.00000000 nan, 120.46331500 30.70466200 0.00000000 nan, 120.46431100 30.70494200 0.00000000 nan, 120.46497800 30.70567100 0.00000000 nan, 120.46713000 30.70787400 0.00000000 nan, 120.47227200 30.71349400 0.00000000 nan, 120.47293100 30.71649600 0.00000000 nan, 120.47298800 30.71676300 0.00000000 nan, 120.47377000 30.72035600 0.00000000 nan, 120.47518300 30.72222800 0.00000000 nan, 120.47660500 30.72427300 0.00000000 nan, 120.48090500 30.72943500 0.00000000 nan, 120.48304800 30.73194000 0.00000000 nan, 120.48377600 30.73327000 0.00000000 nan, 120.48388000 30.73395300 0.00000000 nan, 120.48373900 30.73451800 0.00000000 nan, 120.48218300 30.73513500 0.00000000 nan, 120.47929900 30.73563600 0.00000000 nan, 120.47778400 30.73611700 0.00000000 nan, 120.47726900 30.73698100 0.00000000 nan, 120.47675800 30.73808200 0.00000000 nan, 120.47662100 30.73955700 0.00000000 nan, 120.47651300 30.74076000 0.00000000 nan, 120.47625400 30.74131400 0.00000000 nan, 120.47570100 30.74310000 0.00000000 nan, 120.47503300 30.74470400 0.00000000 nan, 120.47383200 30.74653800 0.00000000 nan, 120.47213800 30.74916300 0.00000000 nan, 120.47173800 30.74997900 0.00000000 nan, 120.47117300 30.75124800 0.00000000 nan, 120.47075000 30.75219900 0.00000000 nan))";
		System.out.println(polygonwkttoJson(polygonzm));
	}

	// 输入
	// POINT  ( 120.06282800 30.84607400)
	// POINT ZM ( 127.51388100 46.88220700 0.00000000 nan)
	// 输出
	// {"spatialReference":{"wkid":4326},"x":126.69408435478817,"y":46.586925830981734}
	@SuppressWarnings("unused")
	private static String pointwkttoJson(String wkt) {
		String jsonT = "{\"spatialReference\":{\"wkid\":4326},\"x\":%s,\"y\":%s}";

		String regex = ".+?\\((.+?)\\)";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(wkt);
		if (matcher.matches()) {
			String group = matcher.group(1).trim();
			String[] xy = group.split(" ");
			return String.format(jsonT, xy[0], xy[1]);
		} else {
			return "";
		} 
	}
    
	// 输入
	// LINESTRING ZM ( 120.05256700 30.30386900 0.00000000 nan, 120.05262500 30.30410800 0.00000000 nan, 120.05276200 30.30498800 0.00000000 nan,...)
	// 输出
	// {"spatialReference":{"wkid":4326},"paths":[[[126.82198038385155,46.61012557578858],[126.87254393022545,46.51613686605828],[126.76487331971163,46.47033224169605],[126.7904525255243,46.41441490805904]]]}
	@SuppressWarnings("unused")
	private static String polylinewkttoJson(String wkt) {
		String jsonT = "{\"spatialReference\":{\"wkid\":4326},\"paths\":[[%s]]}";

		String regex = ".+?\\((.+?)\\)";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(wkt);
		if (matcher.matches()) { 
			String group = matcher.group(1).trim();
			String[] xys = group.split(",");
			String[] partArray = new String[xys.length];
			for(int i = 0; i < xys.length; i++){
				String[] xy = xys[i].trim().split(" ");
				partArray[i] = String.format("[%s,%s]", xy[0], xy[1]);
			}
			String coords = join(partArray, ',');
			return String.format(jsonT, coords);
		} else {
			return "";
		} 
	}
	
	// 输入
	// POLYGON ZM (( 119.87030100 30.70903900 0.00000000 nan, 119.87238700 30.71004900 0.00000000 nan,...))
	// 输出
	// {"spatialReference":{"wkid":4326},"rings":[[[126.44305121867309,46.66485317892268],[126.59712131880059,46.64700722137895],[126.57332670874229,46.520300922818485],[126.42401553062645,46.5607517599176],[126.44305121867309,46.66485317892268]]]}
	private static String polygonwkttoJson(String wkt) {
		String jsonT = "{\"spatialReference\":{\"wkid\":4326},\"rings\":[[%s]]}";

		String regex = ".+?\\(\\((.+?)\\)\\)";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(wkt);
		if (matcher.matches()) { 
			String group = matcher.group(1).trim();
			System.out.println("count="+matcher.groupCount());
			for(int i=0;i<=matcher.groupCount();i++){
				System.out.println(matcher.group(i));
			}
			String[] xys = group.split(",");
			String[] partArray = new String[xys.length];
			for(int i = 0; i < xys.length; i++){
				String[] xy = xys[i].trim().split(" ");
				partArray[i] = String.format("[%s,%s]", xy[0], xy[1]);
			}
			String coords = join(partArray, ',');
			return String.format(jsonT, coords);
		} else {
			return "";
		} 
	}
	
	
	
	// array join to string
	public static String join(Object[] array, char separator) {  
        if (array == null) {  
            return null;  
        }  
        int arraySize = array.length;  
        int bufSize = (arraySize == 0 ? 0 : ((array[0] == null ? 16 : array[0].toString().length()) + 1) * arraySize);  
        StringBuffer buf = new StringBuffer(bufSize);  
  
        for (int i = 0; i < arraySize; i++) {  
            if (i > 0) {  
                buf.append(separator);  
            }  
            if (array[i] != null) {  
                buf.append(array[i]);  
            }  
        }  
        return buf.toString();  
    }  
}
